GIT COMMANDS : 
git init - to initialize a repository in the present directory
git config --list - to list all the config details of your git 
git config --global <config_name> <information> - used to add / edit the config details
git status - used to inspect the current state of the repository such as untracked filellls
git add . - adds files to the staging area from the current directory
git add <file_name> - adds specified file to the staging area
git reset . - resets all the staged files in the current directory to untracked files
git commit -m <message> - used to finalize the files added to the staging area to the repository
git log - used to look up past activites related to commits 
git commit -a -m <message> - used to add files to staging and commit them at the same time
git remote - returns the remote repositories linked to the local project
git remote add origin <url> - used to link a remote repository to the local project
git push origin main -u - pushes the commited files to the remote repository
git fetch - used to fetch the latest changes to code in the remote repositories
git merge <branch_name> - to merge the specified branch on top of the main branch
git pull origin main - used to fetch and merge all at once
git clone <url> <custom_directory> - used to clone a git remote repository on to your local system
git branch - lists out all the branches
git branch <branch_name> - used to create a new branch
git branch -d <branch_name> - used to safely delete a branch
git branch -D <branch_name> - used to force delete a branch 
git checkout <branch_name> - used to switch to the specified branch
git checkout -b <branch_name> - used to create a new branch and switch to it at the same time
git checkout - - used to switch back to the previous branch 
git merge --abort - used to exit the merge stage
git diff - used to find out the diff between the two commits
git reset - used to rollback the files from staging area to untracked status
git reset <desired_commit_id> - moves us back to the previous commit specified but doesnt delete anyfiles added after the commit
git reset --hard <desired_commit_id> - moves us back to the specified commit and deletes all the files added after that commit
git revert <commit_id> - doesnt reset to the commit specified but instead recommits the specified commit, still keeping the commit history intact
git commit --amend -m <message> - used to amend the previous commit's message
git commit --amend --no-edit - used to add an extra unstaged file to the previous commit, make sure to stage the file first before exectuting this command
git stash - used to keep track of the staged files in a stack but remove them from staging
git stash pop - used to recall the files tracked by stash to the main staging area
git stash save <name> - to give a name to the stash in order to keep the stashes organised
git stash list - used to list all the present stashes present in the stack along with their indexes
git stash apply <stash_index> - used to pop a specific stash with the given index
git rebase main - alternative to the merge, but rewrites history, used keep a branch up to date with a master branch 
git rebase main --interactive - opens an interactive editor to modify commits made to branch and can use the squash keyword to combine commits to make commit history more concise

GIT NOTES : 
=> .gitignore file is used to contain all the names of files which are to be ignored while adding or committing
=> -u flag is used to set origin to upstream remote
=> when you make changes to the repo directly from repo, it becomes one commit ahead of local branch
   in order to get the changes you need to fetch it from the repo and then merge the remote/main branch with local main branch
=> git pull will give error if you have uncommited changes in the local repository at that moment
   can be taken care of using the stash command
=> branch allows you to create an alternate space to alter and create code 
=> before merging branches are up to date with the commits
=> if two branches are working on the same line of code, then it may cause a merge conflict
   this will make you either choose between either, continue with both or exit the merge command using --abort flag
=> if you fork a repo on github itll copy the repository to your main account while stil maintianing the link to the original repository
   the original repo is called upstream repository, after you work on a repository you can send a pull request to merge your code to the orginal repository
=> dont do reset if the code is already pushed to github 
=> revert is a better option while working in a group


